{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Plmake","body":"Plmake\r\n======\r\n\r\nThis is a Makefile-like system for managing builds between multiple\r\ndependent files. Some knowledge of prolog is assumed.\r\n\r\nGetting Started\r\n---------------\r\n\r\nInstall SWI-Prolog from http://www.swi-prolog.org\r\n\r\nGet the latest plmake source from github. No installation steps are\r\nrequired. Add it to your path:\r\n\r\n    export PATH=$PATH:$HOME/plmake/bin\r\n\r\n(changing the directory as necessary)\r\n\r\nGet (minimal) help from the command line:\r\n\r\n    plmake -h\r\n\r\nCommand-line\r\n------------\r\n\r\n  plmake [-h] [-t GNUMAKEFILE] [-l TARGET] [-n|--dry-run] [--always-make] [TARGET...]\r\n\r\nExamples\r\n--------\r\n\r\n(this assumes some knowledge of make and makefiles)\r\n\r\nplmake expects a file called `makespec.pro` to be present in your\r\ncurrent directory.\r\n\r\nAssume you have two file formats, \".foo\" and \".bar\", and a foo2bar\r\nconverter.\r\n\r\nAdd the following rule to your makespec.pro:\r\n\r\n    '%.bar' <-- '%.foo',\r\n        'foo2bar $< > $@'.\r\n\r\nUnlike makefiles, whitespace is irrelevant. Remember the closing \".\",\r\nas this is prolog syntax.\r\n\r\nTo convert a pre-existing file \"x.foo\" to \"x.bar\" type:\r\n\r\n    plmake x.bar\r\n\r\nLet's say we can go from a .bar to a .baz using a bar2baz\r\nconverter. We can add an additional rule:\r\n\r\n    '%.baz' <-- '%.bar',\r\n        'bar2baz $< > $@'.\r\n\r\nNow if we type:\r\n\r\n    touch x.foo\r\n    plmake x.baz\r\n\r\nThe output will be something like:\r\n\r\n    NT: x.baz <-- [x.bar]\r\n      NT: x.bar <-- [x.foo]\r\n        T: x.foo\r\n        foo2bar x.foo > x.bar\r\n      NT: x.bar is up to date\r\n      bar2baz x.bar > x.baz\r\n    NT: x.baz is up to date\r\n\r\nIn the future the output format will be more configurable. The idea is\r\nto show the dependencies as a tree structure.\r\n\r\nThe syntax in the makespec above is designed to be similar to what is\r\nalready used in makefiles. You can bypass this and use prolog\r\nvariables. The following form is functionally equivalent:\r\n\r\n    '$Base.bar' <-- '$Base.foo',\r\n        'foo2bar $Base.foo > $Base.bar'.\r\n\r\nNote that unlike Makefiles, the variables are not enclosed in\r\nparentheses. These are not Makefile variable, but are actually prolog\r\nvariables (and must conform to prolog syntax - they must have a\r\nleading uppercase, and only alphanumeric characters plus underscore).\r\n\r\nYou can mix and match if you like:\r\n\r\n    '$Base.bar' <-- '$Base.foo',\r\n        'foo2bar $< > $@'.\r\n\r\nUnlike makefiles, plmake allows multiple variables in pattern\r\nmatching. Let's say we have a program called \"align\" that compares two\r\nfiles producing some output (e.g. biological sequence alignment, or\r\nontology alignment). Assume our file convention is to suffix `.fa` on\r\nthe inputs.  We can write a makespec with the following:\r\n\r\n    'align-$X-$Y.tbl' <-- ['$X.fa', '$Y.fa'],\r\n        'align $X.fa $Y.fa > $@'.\r\n\r\n(note that if we have multiple dependecies, these must be separated by\r\ncommas and enclodes in square brackets - i.e. a prolog list]\r\n\r\nNow if we have files `x.fa` and `y.fa` we can type:\r\n\r\n    plmake align-x-y.tbl\r\n\r\nWe can include arbitrary prolog, including both database facts and\r\nrules. We can use these rules to control flow in a way that is more\r\npowerful than makefiles. Let's say we only want to run a certain\r\nprogram when the inputs match a certain table in our database:\r\n\r\n    sp(mouse).\r\n    sp(human).\r\n    sp(zebrafish).\r\n\r\n    'align-$X-$Y.tbl' <-- ['$X.fa', '$Y.fa'],\r\n        {sp(X),sp(Y)},\r\n        'align $X.fa $Y.fa > $@'.\r\n\r\nNote that here the rule consists of 4 parts:\r\n\r\n * the target/output\r\n * dependencies\r\n * a prolog goal, enclosed in {}s, that is called to determine values\r\n * the command\r\n\r\nIn this case, the prolog goal succeeds with 9 solutions, with 3\r\ndifferent values for X and Y. If we type:\r\n\r\n  plmake align-platypus-coelocanth.tbl\r\n\r\nIt will not succeed, even if the .fa files are on the filesystem. This\r\nis because the goal cannot be satisfied for these two values.\r\n\r\nWe can create a top-level target that generates all solutions:\r\n\r\n    % Database of species\r\n    sp(mouse).\r\n    sp(human).\r\n    sp(zebrafish).\r\n\r\n    % rule for generating a pair of (non-identical) species (asymetric)\r\n    pair(X,Y) :- sp(X),sp(Y),X@<Y.\r\n\r\n    % top level target\r\n    all <-- Deps, \r\n      {findall( t(['align-',X,-,Y,'.tbl']),\r\n                pair(X,Y),\r\n                Deps)}.\r\n\r\n    % plmake rule\r\n    'align-$X-$Y.tbl' <-- ['$X.obo', '$Y.obo'],\r\n        'align $X.obo $Y.obo > $@'.\r\n\r\nIt takes a little knowledge of prolog metalogical operators to\r\nconstruct the generator - in future there may be a convenient\r\nsyntactic form that hides this.\r\n\r\nNow if we type:\r\n\r\n    plmake all\r\n\r\nAnd all non-identical pairs are compared (in one direction only - the\r\nassumption is that \"align\" is symmetric).\r\n\r\nMore\r\n----\r\n\r\nThere are a few more features that will be documented in the\r\nfuture. The core will likely stay minimal. The core system is\r\nextensive and powerful so you should be able to do lots by\r\nusing/abusing either prolog or shell wrappers.\r\n\r\nIn the future there may be extensions for:\r\n\r\n* a web-based build environment (a la Galaxy)\r\n* semantic web enhancement (using NEPOMUK file ontology)\r\n* using other back ends and target sources (sqlite db, REST services)\r\n* cloud-based computing\r\n* running computes on clusters\r\n* make2plmake partial translator\r\n* alternate syntaxes\r\n\r\nReal-life examples\r\n------------------\r\n\r\nThe makespec.pro in this project is used to make the pack release.\r\n\r\nSee http://code.google.com/p/omeo/ - in particular,\r\nhttp://code.google.com/p/omeo/source/browse/trunk/build/makespec.pro\r\n\r\nHistory\r\n-------\r\n\r\nThis is a much simplified version of a system called \"BioMake\" from\r\nsome time ago.\r\n","tagline":"Make-like build system based on prolog"}